--- openssl-1.0.1m.orig/ssl/ssl.h	2015-06-06 08:21:05.004949108 +0000
+++ openssl-1.0.1m/ssl/ssl.h	2015-06-06 08:31:38.552930262 +0000
@@ -1362,6 +1362,8 @@ struct ssl_st {
     unsigned char sid_ctx[SSL_MAX_SID_CTX_LENGTH];
     /* This can also be in the session once a session is established */
     SSL_SESSION *session;
+    /* This can be disabled to prevent the use of uncached sessions */
+	int session_creation_enabled;
     /* Default generate session ID callback. */
     GEN_SESSION_CB generate_session_id;
     /* Used in SSL2 and SSL3 */
@@ -1840,6 +1842,7 @@ const char *SSL_get_cipher_list(const SS
 char *SSL_get_shared_ciphers(const SSL *s, char *buf, int len);
 int SSL_get_read_ahead(const SSL *s);
 int SSL_pending(const SSL *s);
+const char *SSL_authentication_method(const SSL *c);
 # ifndef OPENSSL_NO_SOCK
 int SSL_set_fd(SSL *s, int fd);
 int SSL_set_rfd(SSL *s, int fd);
@@ -1851,6 +1854,7 @@ BIO *SSL_get_rbio(const SSL *s);
 BIO *SSL_get_wbio(const SSL *s);
 # endif
 int SSL_set_cipher_list(SSL *s, const char *str);
+int SSL_set_cipher_lists(SSL *s, STACK_OF(SSL_CIPHER) *sk);
 void SSL_set_read_ahead(SSL *s, int yes);
 int SSL_get_verify_mode(const SSL *s);
 int SSL_get_verify_depth(const SSL *s);
@@ -1867,6 +1871,8 @@ int SSL_use_PrivateKey_ASN1(int pk, SSL
                             long len);
 int SSL_use_certificate(SSL *ssl, X509 *x);
 int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
+int SSL_use_certificate_chain(SSL *ssl, STACK_OF(X509) *cert_chain);
+STACK_OF(X509) *SSL_get_certificate_chain(SSL *ssl, X509 *x);
 
 # ifndef OPENSSL_NO_STDIO
 int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
@@ -1907,6 +1913,7 @@ int SSL_SESSION_set1_id_context(SSL_SESS
 SSL_SESSION *SSL_SESSION_new(void);
 const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,
                                         unsigned int *len);
+const char *SSL_SESSION_get_version(const SSL_SESSION *s);
 unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s);
 # ifndef OPENSSL_NO_FP_API
 int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
@@ -1917,6 +1924,7 @@ int SSL_SESSION_print(BIO *fp, const SSL
 void SSL_SESSION_free(SSL_SESSION *ses);
 int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 int SSL_set_session(SSL *to, SSL_SESSION *session);
+void SSL_set_session_creation_enabled(SSL *, int);
 int SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c);
 int SSL_CTX_remove_session(SSL_CTX *, SSL_SESSION *c);
 int SSL_CTX_set_generate_session_id(SSL_CTX *, GEN_SESSION_CB);
@@ -2430,6 +2438,7 @@ void ERR_load_SSL_strings(void);
 # define SSL_F_SSL_UNDEFINED_VOID_FUNCTION                244
 # define SSL_F_SSL_USE_CERTIFICATE                        198
 # define SSL_F_SSL_USE_CERTIFICATE_ASN1                   199
+# define SSL_F_SSL_USE_CERTIFICATE_CHAIN                 2000
 # define SSL_F_SSL_USE_CERTIFICATE_FILE                   200
 # define SSL_F_SSL_USE_PRIVATEKEY                         201
 # define SSL_F_SSL_USE_PRIVATEKEY_ASN1                    202
@@ -2652,6 +2661,7 @@ void ERR_load_SSL_strings(void);
 # define SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING           345
 # define SSL_R_SERVERHELLO_TLSEXT                         275
 # define SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED           277
+# define SSL_R_SESSION_MAY_NOT_BE_CREATED                2000
 # define SSL_R_SHORT_READ                                 219
 # define SSL_R_SIGNATURE_ALGORITHMS_ERROR                 360
 # define SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE      220
--- openssl-1.0.1m.orig/ssl/d1_clnt.c	2015-06-06 08:21:04.992949108 +0000
+++ openssl-1.0.1m/ssl/d1_clnt.c	2015-06-06 08:33:33.192926851 +0000
@@ -795,6 +795,12 @@ int dtls1_client_hello(SSL *s)
             (!sess->session_id_length && !sess->tlsext_tick) ||
 #endif
             (s->session->not_resumable)) {
+	        if (!s->session_creation_enabled)
+			{
+				ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+				SSLerr(SSL_F_DTLS1_CLIENT_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+				goto err;
+			}
             if (!ssl_get_new_session(s, 0))
                 goto err;
         }
--- openssl-1.0.1m.orig/ssl/s23_clnt.c	2015-06-06 08:21:05.008949108 +0000
+++ openssl-1.0.1m/ssl/s23_clnt.c	2015-06-06 08:34:39.876924868 +0000
@@ -788,6 +788,13 @@ static int ssl23_get_server_hello(SSL *s
      * Since, if we are sending a ssl23 client hello, we are not reusing a
      * session-id
      */
+    if (!s->session_creation_enabled)
+		{
+		if (!(s->client_version == SSL2_VERSION))
+			ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+		SSLerr(SSL_F_SSL23_GET_SERVER_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+		goto err;
+		}
     if (!ssl_get_new_session(s, 0))
         goto err;
 
--- openssl-1.0.1m.orig/ssl/s3_both.c	2015-06-06 08:21:05.000949108 +0000
+++ openssl-1.0.1m/ssl/s3_both.c	2015-06-06 08:36:55.308920839 +0000
@@ -351,8 +351,11 @@ unsigned long ssl3_output_cert_chain(SSL
     unsigned long l = 7;
     BUF_MEM *buf;
     int no_chain;
+ 	STACK_OF(X509) *cert_chain;
 
-    if ((s->mode & SSL_MODE_NO_AUTO_CHAIN) || s->ctx->extra_certs)
+	cert_chain = SSL_get_certificate_chain(s, x);
+
+    if ((s->mode & SSL_MODE_NO_AUTO_CHAIN) || s->ctx->extra_certs || cert_chain)
         no_chain = 1;
     else
         no_chain = 0;
@@ -395,6 +398,10 @@ unsigned long ssl3_output_cert_chain(SSL
             return (0);
     }
 
+	for (i=0; i<sk_X509_num(cert_chain); i++)
+		if (ssl3_add_cert_to_buf(buf, &l, sk_X509_value(cert_chain,i)))
+			return(0);
+
     l -= 7;
     p = (unsigned char *)&(buf->data[4]);
     l2n3(l, p);
--- openssl-1.0.1m.orig/ssl/s3_clnt.c	2015-06-06 08:21:05.008949108 +0000
+++ openssl-1.0.1m/ssl/s3_clnt.c	2015-06-06 08:41:05.304913402 +0000
@@ -661,6 +661,11 @@ int ssl3_client_hello(SSL *s)
         if ((sess == NULL) ||
             (sess->ssl_version != s->version) ||
             !sess->session_id_length || (sess->not_resumable)) {
+	        if (!s->session_creation_enabled) {
+				ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+				SSLerr(SSL_F_SSL3_CLIENT_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+				goto err;
+			}
             if (!ssl_get_new_session(s, 0))
                 goto err;
         }
@@ -903,6 +908,11 @@ int ssl3_get_server_hello(SSL *s)
          * we don't stuff up other people
          */
         if (s->session->session_id_length > 0) {
+	        if (!s->session_creation_enabled) {
+				ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+				SSLerr(SSL_F_SSL3_GET_SERVER_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+				goto err;
+			}
             if (!ssl_get_new_session(s, 0)) {
                 al = SSL_AD_INTERNAL_ERROR;
                 goto f_err;
--- openssl-1.0.1m.orig/ssl/s3_srvr.c	2015-06-06 08:21:04.992949108 +0000
+++ openssl-1.0.1m/ssl/s3_srvr.c	2015-06-06 08:44:40.004907016 +0000
@@ -1050,6 +1050,11 @@ int ssl3_get_client_hello(SSL *s)
      */
     if ((s->new_session
          && (s->options & SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION))) {
+        if (!s->session_creation_enabled) {
+			ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+			SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+			goto err;
+		}
         if (!ssl_get_new_session(s, 1))
             goto err;
     } else {
@@ -1070,6 +1075,11 @@ int ssl3_get_client_hello(SSL *s)
             goto err;
         else {                  /* i == 0 */
 
+	        if (!s->session_creation_enabled) {
+				ssl3_send_alert(s,SSL3_AL_FATAL,SSL_AD_HANDSHAKE_FAILURE);
+				SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,SSL_R_SESSION_MAY_NOT_BE_CREATED);
+				goto err;
+			}
             if (!ssl_get_new_session(s, 1))
                 goto err;
         }
--- openssl-1.0.1m.orig/ssl/ssl_ciph.c	2015-06-06 08:21:05.012949108 +0000
+++ openssl-1.0.1m/ssl/ssl_ciph.c	2015-06-06 08:21:05.392949097 +0000
@@ -1816,6 +1816,52 @@ unsigned long SSL_CIPHER_get_id(const SS
     return c->id;
 }
 
+/* return string version of key exchange algorithm */
+const char* SSL_CIPHER_authentication_method(const SSL_CIPHER* cipher)
+	{
+	switch (cipher->algorithm_mkey)
+		{
+	case SSL_kRSA:
+		return SSL_TXT_RSA;
+	case SSL_kDHr:
+		return SSL_TXT_DH "_" SSL_TXT_RSA;
+	case SSL_kDHd:
+		return SSL_TXT_DH "_" SSL_TXT_DSS;
+	case SSL_kEDH:
+		switch (cipher->algorithm_auth)
+			{
+		case SSL_aDSS:
+			return "DHE_" SSL_TXT_DSS;
+		case SSL_aRSA:
+			return "DHE_" SSL_TXT_RSA;
+		case SSL_aNULL:
+			return SSL_TXT_DH "_anon";
+		default:
+			return "UNKNOWN";
+                        }
+	case SSL_kKRB5:
+		return SSL_TXT_KRB5;
+	case SSL_kECDHr:
+		return SSL_TXT_ECDH "_" SSL_TXT_RSA;
+	case SSL_kECDHe:
+		return SSL_TXT_ECDH "_" SSL_TXT_ECDSA;
+	case SSL_kEECDH:
+		switch (cipher->algorithm_auth)
+			{
+		case SSL_aECDSA:
+			return "ECDHE_" SSL_TXT_ECDSA;
+		case SSL_aRSA:
+			return "ECDHE_" SSL_TXT_RSA;
+		case SSL_aNULL:
+			return SSL_TXT_ECDH "_anon";
+		default:
+			return "UNKNOWN";
+                        }
+        default:
+		return "UNKNOWN";
+		}
+	}
+
 SSL_COMP *ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n)
 {
     SSL_COMP *ctmp;
--- openssl-1.0.1m.orig/ssl/ssl_err.c	2015-06-06 08:21:04.996949108 +0000
+++ openssl-1.0.1m/ssl/ssl_err.c	2015-06-06 08:46:44.392903315 +0000
@@ -602,6 +602,7 @@ static ERR_STRING_DATA SSL_str_reasons[]
     {ERR_REASON(SSL_R_SERVERHELLO_TLSEXT), "serverhello tlsext"},
     {ERR_REASON(SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED),
      "session id context uninitialized"},
+	{ERR_REASON(SSL_R_SESSION_MAY_NOT_BE_CREATED), "session may not be created"},
     {ERR_REASON(SSL_R_SHORT_READ), "short read"},
     {ERR_REASON(SSL_R_SIGNATURE_ALGORITHMS_ERROR),
      "signature algorithms error"},
--- openssl-1.0.1m.orig/ssl/ssl_lib.c	2015-06-06 08:21:05.000949108 +0000
+++ openssl-1.0.1m/ssl/ssl_lib.c	2015-06-06 08:50:47.916896071 +0000
@@ -336,6 +336,7 @@ SSL *SSL_new(SSL_CTX *ctx)
     OPENSSL_assert(s->sid_ctx_length <= sizeof s->sid_ctx);
     memcpy(&s->sid_ctx, &ctx->sid_ctx, sizeof(s->sid_ctx));
     s->verify_callback = ctx->default_verify_callback;
+	s->session_creation_enabled = 1;
     s->generate_session_id = ctx->generate_session_id;
 
     s->param = X509_VERIFY_PARAM_new();
@@ -1314,6 +1315,32 @@ int SSL_set_cipher_list(SSL *s, const ch
     return 1;
 }
 
+/** specify the ciphers to be used by the SSL */
+int SSL_set_cipher_lists(SSL *s,STACK_OF(SSL_CIPHER) *sk)
+	{
+	STACK_OF(SSL_CIPHER) *tmp_cipher_list;
+
+	if (sk == NULL)
+		return 0;
+
+        /* Based on end of ssl_create_cipher_list */
+	tmp_cipher_list = sk_SSL_CIPHER_dup(sk);
+	if (tmp_cipher_list == NULL)
+		{
+		return 0;
+		}
+	if (s->cipher_list != NULL)
+		sk_SSL_CIPHER_free(s->cipher_list);
+	s->cipher_list = sk;
+	if (s->cipher_list_by_id != NULL)
+		sk_SSL_CIPHER_free(s->cipher_list_by_id);
+	s->cipher_list_by_id = tmp_cipher_list;
+	(void)sk_SSL_CIPHER_set_cmp_func(s->cipher_list_by_id,ssl_cipher_ptr_id_cmp);
+
+	sk_SSL_CIPHER_sort(s->cipher_list_by_id);
+	return 1;
+	}
+
 /* works well for SSLv2, not so good for SSLv3 */
 char *SSL_get_shared_ciphers(const SSL *s, char *buf, int len)
 {
@@ -2618,20 +2645,42 @@ SSL_METHOD *ssl_bad_method(int ver)
     return (NULL);
 }
 
+static const char *ssl_get_version(int version)
+{
+	if (version == TLS1_2_VERSION)
+		return("TLSv1.2");
+	else if (version == TLS1_1_VERSION)
+		return("TLSv1.1");
+	else if (version == TLS1_VERSION)
+		return("TLSv1");
+	else if (version == SSL3_VERSION)
+		return("SSLv3");
+	else if (version == SSL2_VERSION)
+		return("SSLv2");
+	else
+		return("unknown");
+}
+
 const char *SSL_get_version(const SSL *s)
 {
-    if (s->version == TLS1_2_VERSION)
-        return ("TLSv1.2");
-    else if (s->version == TLS1_1_VERSION)
-        return ("TLSv1.1");
-    else if (s->version == TLS1_VERSION)
-        return ("TLSv1");
-    else if (s->version == SSL3_VERSION)
-        return ("SSLv3");
-    else if (s->version == SSL2_VERSION)
-        return ("SSLv2");
-    else
-        return ("unknown");
+	return ssl_get_version(s->version);
+}
+
+const char *SSL_SESSION_get_version(const SSL_SESSION *s)
+{
+	return ssl_get_version(s->ssl_version);
+}
+
+const char* SSL_authentication_method(const SSL* ssl)
+{
+	if (ssl->cert != NULL && ssl->cert->rsa_tmp != NULL)
+		return SSL_TXT_RSA "_" SSL_TXT_EXPORT;
+	switch (ssl->version) {
+	case SSL2_VERSION:
+		return SSL_TXT_RSA;
+	default:
+		return SSL_CIPHER_authentication_method(ssl->s3->tmp.new_cipher);
+	}
 }
 
 SSL *SSL_dup(SSL *s)
--- openssl-1.0.1m.orig/ssl/ssl_locl.h	2015-06-06 08:21:05.004949108 +0000
+++ openssl-1.0.1m/ssl/ssl_locl.h	2015-06-06 08:51:26.504894923 +0000
@@ -502,6 +502,7 @@
 
 typedef struct cert_pkey_st {
     X509 *x509;
+	STACK_OF(X509) *cert_chain;
     EVP_PKEY *privatekey;
     /* Digest to use when signing */
     const EVP_MD *digest;
--- openssl-1.0.1m.orig/ssl/ssl_rsa.c	2015-06-06 08:21:05.000949108 +0000
+++ openssl-1.0.1m/ssl/ssl_rsa.c	2015-06-06 08:21:05.408949096 +0000
@@ -643,6 +643,42 @@ int SSL_CTX_use_PrivateKey_ASN1(int type
     return (ret);
 }
 
+int SSL_use_certificate_chain(SSL *ssl, STACK_OF(X509) *cert_chain)
+	{
+	if (ssl == NULL)
+		{
+		SSLerr(SSL_F_SSL_USE_CERTIFICATE_CHAIN,ERR_R_PASSED_NULL_PARAMETER);
+		return(0);
+		}
+	if (ssl->cert == NULL)
+		{
+		SSLerr(SSL_F_SSL_USE_CERTIFICATE_CHAIN,SSL_R_NO_CERTIFICATE_ASSIGNED);
+		return(0);
+		}
+	if (ssl->cert->key == NULL)
+		{
+		SSLerr(SSL_F_SSL_USE_CERTIFICATE_CHAIN,SSL_R_NO_CERTIFICATE_ASSIGNED);
+		return(0);
+		}
+	ssl->cert->key->cert_chain = cert_chain;
+	return(1);
+	}
+
+STACK_OF(X509) *SSL_get_certificate_chain(SSL *ssl, X509 *x)
+	{
+	int i;
+	if (x == NULL)
+		return NULL;
+	if (ssl == NULL)
+		return NULL;
+	if (ssl->cert == NULL)
+		return NULL;
+	for (i = 0; i < SSL_PKEY_NUM; i++)
+		if (ssl->cert->pkeys[i].x509 == x)
+			return ssl->cert->pkeys[i].cert_chain;
+	return NULL;
+	}
+
 #ifndef OPENSSL_NO_STDIO
 /*
  * Read a file that contains our certificate in "PEM" format, possibly
--- openssl-1.0.1m.orig/ssl/ssl_sess.c	2015-06-06 08:21:05.004949108 +0000
+++ openssl-1.0.1m/ssl/ssl_sess.c	2015-06-06 08:53:20.652891528 +0000
@@ -276,6 +276,11 @@ static int def_generate_session_id(const
     return 0;
 }
 
+void SSL_set_session_creation_enabled (SSL *s, int creation_enabled)
+	{
+	s->session_creation_enabled = creation_enabled;
+	}
+
 int ssl_get_new_session(SSL *s, int session)
 {
     /* This gets used by clients and servers. */
@@ -284,6 +289,8 @@ int ssl_get_new_session(SSL *s, int sess
     SSL_SESSION *ss = NULL;
     GEN_SESSION_CB cb = def_generate_session_id;
 
+	/* caller should check this if they can do better error handling */
+	if (!s->session_creation_enabled) return(0);
     if ((ss = SSL_SESSION_new()) == NULL)
         return (0);
 
